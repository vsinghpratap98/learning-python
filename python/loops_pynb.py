# -*- coding: utf-8 -*-
"""loops.pynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xoZJJeeqRKZ7GH0-qyNjDYzCgKmN5IYJ
"""

#Loops in Python are control flow statements used to execute a block of code repeatedly. Python primarily offers two types of loops: for loops and while loops.

# for loops:
# Iterate over a sequence (such as a list, tuple, string, or range) or other iterable objects.
# Execute the loop body once for each item in the sequence.
# The loop variable takes on the value of each item in the sequence during each iteration.
# Example of a for loop iterating over a list
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
  print(fruit)

    # Example of a for loop using range()
for i in range(5): # Iterates from 0 to 4
  print(i)

# while loops:
# Execute a block of code repeatedly as long as a specified condition remains true.
# The loop continues until the condition evaluates to False.
# It is crucial to ensure that the condition eventually becomes False to avoid infinite loops.

# Example of a while loop
count = 0
while count < 3:
  print(f"Count is: {count}")
  count += 1

# Loop Control Statements:
# break:
# Terminates the loop entirely and transfers control to the statement immediately following the loop.
# continue:
# Skips the rest of the current iteration and moves to the next iteration of the loop.
# pass:
# A null operation; it does nothing. It can be used as a placeholder in empty loops or functions to avoid syntax errors.

# else with Loops:
# Python allows an optional else block with both for and while loops. The else block is executed when the loop completes its iterations normally (i.e., without encountering a break statement).

# Example of for loop with else
for i in range(3):
    print(i)
else:
    print("Loop finished normally.")

# Example of while loop with else
j = 0
while j < 2:
    print(j)
    j += 1
else:
    print("While loop condition became false.")

#;oops are used to repeat the instruction.

# while lopps:
#while condition:
  # some work

count = 1
while count < 5:
  print("hello")
  count+=1

i = 1
while i < 100:
  print("hii")
  i+=1

# print no. 1 to 5
i = 1
while i <= 5:
  print(i)
  i+=1

# print 5 to 1
i = 5
while i >= 1:
  print(i)
  i-=1
print("loop ended")

# print no from 1 to 100
i = 1
while i <= 100:
  print(i)
  i+=1

# print no from 100 to 1
i = 100
while i >= 1:
  print(i)
  i-=1

# print multiplication table of n
n = int(input("enter the table you want to write "))
i = 1
while i<= 10:
  print(n*i)
  i+=1

n = int(input("enter the table you want to write "))
i = 1
while i<= 10:
  print(f"{n} x {i} = {n * i}")
  i+=1

# print the elements of following list using loop:
# [1,4,9,16,25,36,49,64,81,100]
nums = [1,4,9,16,25,36,49,64,81,100]
idx = 0
while idx < len(nums):
  print(nums[idx])
  idx += 1

heroes = ["ironman","superman","thor","hulk"]
idx = 0
while idx < len(heroes):
  print(heroes[idx])
  idx += 1

# search for number x in tuple using loop
# (1,4,9,16,25,36,49,64,81,100)
nums = (1,4,9,16,25,36,49,64,81,100)
x = 36
i = 0
while i < len(nums):
  if nums[i] == x:
    print(f"the number found at {i}th index")
  i+=1

i=0
while i <= 10:
  print(i)
  if i == 3:
    break
  i+=1
print("end of loop")

i = 0
while i <= 10:
  if i == 3:
    break
  print(i)
  i+=1

i = 0
while i <= 10:
  if i == 4:
    i+=1
    continue
  print(i)
  i+=1

# printing even , odd numbers

i = 1
while i<= 10:
  if (i%2==0):
    i+=1
  print(i)
  i+=1

i = 1
while i <= 10:
  i+=1
  if (i%2!=0):
    continue
  print(i)
  i+=1

# for loop

list = [1,2,3]
for n in list:
  print(n)

nums = [1,2,3,4,5,6]
for val in nums:
  print(val)

vagies = ["potato","brinjal","tomato","cabbage"]
for veg in vagies:
  print(veg)

tup = (1,2,3,4,5,6,7,8,9)
for tuple in tup:
  print(tuple)

str = "deepak singh"
for chr in str:
  print(chr)

# for loop with else
str = "deepak singh"
for chr in str:
  print(chr)
else:
  print("end")

str = "deepak singh"
for char in str:
  if (char == "a"):
    break
  print(char)
else:
  print("ok")

nums = [1,4,9,16,25,36,49,49,64,81,100,49]
x = 49
idx = 0
for el in nums:
  if el == x:
    print("number found at index: ",idx)
  idx+=1

# The range() function in Python is commonly used within for loops to generate a sequence of numbers, controlling the number of iterations or providing numerical values for processing.
# return sequence of numbers
# starting with 0(by default)
# increment by 1(by default)
# stop before specifiesd number

# Example: Looping a specific number of times
for i in range(5):
    print(f"Iteration {i}")

# Example: Looping through a custom range
for num in range(10, 15):
    print(num)

# Example: Looping with a custom step
for j in range(0, 10, 2):
    print(j)

# Example: Looping backwards
for k in range(5, 0, -1):
    print(k)

for i in range(2,10,2):
  print(i)

for i in range(2,100,2):
  print(i)

for i in range(0,11):
  print("deepak")

# print numbers from 100 to 0
for i in range(100,0,-1):
  print(i)

n = int(input("enter the number: "))
for i in range(1,11):
  print(f"{n} x {i} = {n*i}")

# The pass statement in Python is a null operation, meaning it does nothing when executed. Its primary purpose is to act as a placeholder where a statement is syntactically required but no action or code is immediately necessary.
for i in range(5):
  pass
print("some useful work")

# print sum of first n natural number (using while loop)
n = 5
sum = 0
i = 1
while i <= n:
  sum += i
  i+=1
print("total: ",sum)

# for loop
n = 5
sum = 0
for i in range(1,n+1):
  sum+=i
print("total",sum)

# wap to find factorial of first n natural number(using for and while loop)
# using for:
n=5
fact=1
for i in range(1,n+1):
  fact*=i
print("factorial is",fact)

# using while
n=5
i=1
fact=1
while i <= n:
  fact*= i
  i+=1
print("factorial is ",fact)