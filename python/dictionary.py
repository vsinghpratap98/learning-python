# -*- coding: utf-8 -*-
"""dictionary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tr8ZJpW1vzBcZb1CtYQRR6CTtsQvDz1o
"""

# A Python dictionary is a built-in data structure that stores data in key-value pairs.
# Creating a dictionary
my_dict = {
    "brand": "Ford",
    "model": "Mustang",
    "year": 1964
}

# Accessing values
print(my_dict["brand"])  # Output: Ford

# Adding a new key-value pair
my_dict["color"] = "red"

# Updating an existing value
my_dict["year"] = 1965

# Removing a key-value pair
del my_dict["model"]

print(my_dict)  # Output: {'brand': 'Ford', 'year': 1965, 'color': 'red'}

dict ={"name":"Deepak",
       "college":"Rajsathan University",
       "year":2023,
      }
print(dict["name"])
dict["name"] = "yuvi"
print(dict["name"])

dict ={"name":"Deepak",
       "college":"Rajsathan University",
       "year":2023,
      }
print(type(dict))

# empty dictionary
null_dict = {}
print(null_dict)
print(type(null_dict))

# A nested dictionary in Python is a dictionary where the values associated with some keys are themselves other dictionaries. This allows for the creation of hierarchical data structures, enabling the organization of complex information in a structured and intuitive manner.
# Creating a simple nested dictionary
student_data = {
    "Alice": {
        "age": 20,
        "major": "Computer Science",
        "courses": ["Python", "Data Structures"]
    },
    "Bob": {
        "age": 21,
        "major": "Mathematics",
        "courses": ["Calculus", "Linear Algebra"]
    }
}

# Accessing Alice's age
alice_age = student_data["Alice"]["age"]
print(f"Alice's age: {alice_age}")

# Accessing Bob's first course
bob_first_course = student_data["Bob"]["courses"][0]
print(f"Bob's first course: {bob_first_course}")

bob_course = student_data["Bob"]["courses"]
print(bob_course)

# Updating Alice's major
student_data["Alice"]["major"] = "Software Engineering"
print(f"Alice's new major: {student_data['Alice']['major']}")

# Adding a new course for Bob
student_data["Bob"]["courses"].append("Discrete Math")
print(f"Bob's updated courses: {student_data['Bob']['courses']}")

# Adding a new student
student_data["Charlie"] = {
    "age": 19,
    "major": "Physics",
    "courses": ["Mechanics", "Electromagnetism"]
}
print(f"Updated student data: {student_data}")

# Deleting Bob's data
del student_data["Bob"]
print(f"Student data after deleting Bob: {student_data}")

# Python dictionaries provide various built-in methods for manipulation and access.
student = {"name":"Deepak",
           "program":"Bca",
           "college":"MASMS"
           }
print(student.keys())
print(student.values())

student = {"name":"Deepak",
           "program":"Bca",
           "college":"MASMS"
           }
print(student.items())

student = {"name":"Deepak",
           "program":"Bca",
           "college":"MASMS"
           }
student.update({"name":"sagar"})
print(student["name"])

student = {"name":"Deepak",
           "program":"Bca",
           "college":"MASMS"
           }
new_student = student.copy()
print(new_student)

