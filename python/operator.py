# -*- coding: utf-8 -*-
"""operator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kQIFYZtpRx2HockM6r4NMT_UgSG8-gEd
"""

# keyword in python - Reserved word in python

# Boolean Values: True, False
# Null Value: None
# Logical Operators: and, or, not
# Control Flow: if, elif, else, for, while, break, continue
# Function and Class Definition: def, class, lambda
# Module Handling: import, from, as
# Exception Handling: try, except, finally, raise, assert
# Variable Handling: del, global, nonlocal
# Context Management: with
# Return Values: return, yield
# Asynchronous Programming: async, await
# Placeholder: pass

#  operators are special symbols or keywords that perform operations on one or more values, known as operands.

# Arithmetic Operators:
# Used for mathematical calculations.
# + (Addition)
# - (Subtraction)
# * (Multiplication)
# / (Division)
# % (Modulo - remainder of division)
# // (Floor Division - integer division)
# ** (Exponentiation)

# Assignment Operators:
# Used to assign values to variables.
# = (Assignment)
# +=, -=, *=, /=, %=, //=, **= (Compound assignment operators)

# Comparison (Relational) Operators:
# Used to compare two values and return a boolean result (True or False).
# == (Equal to)
# != (Not equal to)
# > (Greater than)
# < (Less than)
# >= (Greater than or equal to)
# <= (Less than or equal to)

# Logical Operators:
# Used to combine conditional statements.
# and (Logical AND)
# or (Logical OR)
# not (Logical NOT)

# Bitwise Operators:
# Used to perform operations on individual bits of binary numbers.
# & (Bitwise AND)
# | (Bitwise OR)
# ^ (Bitwise XOR)
# ~ (Bitwise NOT)
# << (Left Shift)
# >> (Right Shift)

# Identity Operators:
# Used to check if two variables refer to the same object in memory.
# is
# is not

# Membership Operators:
# Used to test if a value is present in a sequence (e.g., string, list, tuple, set, dictionary).
# in
# not in

# assignment operatpr
num = 10
num+=1
print(num)

num = 10
num-=1
print(num)

num = 10
num*=5
print(num)

num = 10
num%=5
print(num)

num = 10
num**=5
print(num)

# relational / comparison operator
a = 40
b = 23
print(a == b)
print(a != b)
print(a>=b)
print(a<=b)
print(a<b)
print(a>b)

# logical operator
a = 50
b = 30
print(not(a>b))
print(not(False))

# logical operator
val1 = True
val2 = True
print("and operator: ",val1 and val2)

val1 = True
val2 = False

print("and operator",val1 and val2)

a = 23
b = 50
print("or opearator: ",(a==b)or(a>b))

# The input() function in Python is a built-in function used to obtain user input from the console during program execution.
name = input("enter your name : ")
age = int(input( "enter your age: "))
marks = float(input("enter the marks:"))

print("your name is ",name)
print("your age is ",age)
print("your marks is ",marks)

# input two number and their sum
a = int(input("enter first: "))
b = int(input("enter second: "))
sum = a+b
print("sum is : ",sum)

# input side of square
a = int(input("enter side: "))
area = a**2
print(area)

a = float(input("enter the side : "))
area = a*a
print(area)

# input two floating point and print their average
num1 = float(input("enter num 1: "))
num2 = float(input("enter the num 2: "))
avg = num1+num2/2
print("average is: ",avg)

# print a is greater than 2
a = int(input("enter the number: "))
b = int(input("enter the number: "))
print(a>=b)