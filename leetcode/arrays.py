# -*- coding: utf-8 -*-
"""arrays.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vmd-_tz7SWazAtuPM7NAx3_41tqOWIjT
"""

# The array module: This is a built-in module in Python that provides a way to store a sequence of numbers of the same type in a compact and efficient manner, similar to arrays in other programming languages like C or Java. This module is particularly useful when dealing with large datasets of numerical data where memory efficiency is crucial.
# Homogeneous data type: Elements within a single array must typically be of the same data type.
# Contiguous memory storage: Elements are often stored in contiguous memory locations, which can lead to faster access and processing.
# Indexed access: Elements are accessed using numerical indices, starting from 0.
# Efficiency: Designed for efficient storage and manipulation of large numerical datasets.

arr = [10, 20, 30, 40, 50]
# Indexes:  0   1   2   3   4
#  Basic Array Operations:

# Operation	Description

# Traversal	Ek-ek element ko dekhna
# Insertion	Element add karna
# Deletion	Element remove karna
# Search	  Kisi element ko dhoondhna
# Update	  Kisi index ka value change karna

arr = [1, 2, 3]

# Access:
print(arr[0])  # 1

# Update:
arr[1] = 5     # [1, 5, 3]

# Append (end me add):
arr.append(10) # [1, 5, 3, 10]

# Delete:
arr.remove(5)  # [1, 3, 10]

print(arr)

#  Why Array is Useful in DSA?
# Searching

# Sorting

# Sliding Window

# Prefix Sum

# Two Pointers

# Kadane's Algorithm (for max subarray sum)

# Indexing
arr = [10, 20, 30]
# Index:   0   1   2

print(arr[0])  # Output: 10
print(arr[2])  # Output: 30

#  Traversing
# print all item using loop
arr = [5, 10, 15, 20]

for i in arr:
    print(i)

# Update / Change value
arr = [1, 2, 3]
arr[1] = 99
print(arr)  # Output: [1, 99, 3]

# Add / Remove in Python list
arr = [1, 2, 3]
arr.append(4)       # Add 4
arr[0] = 10         # Change 1 â†’ 10
arr.remove(2)       # Remove 2
print(arr)